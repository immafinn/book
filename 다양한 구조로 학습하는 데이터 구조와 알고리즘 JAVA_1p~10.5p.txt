1.1 변수
변수는 데이터를 담는 공간임. 

1.2 데이터형
컴퓨터의 메모리는 정해져 있기 때문에 당연이 저장하려는 데이터가 최소한의 메모리를 차지하는게 좋음. 그래서 프로그래밍 언어들은 데이터를 저장할 수 있는 공간을 각 원시 데이터, 사용자 정의 데이터로 사용할 수 있도록 제공함. 원시 데이터는 프로그래밍 언어에서 미리 지정해둔 데이터 공간이 들어있음. 시스템에서 설정한 공간보다 많이 필요하면 사용자는 사용자 데이터는 직접 설정하여 사용할 수 있음.
C/C++에서 구조체, JAVA에서 CLASS 등이 여기에 해당함.

1.3 데이터 구조
차례대로 접근 할 수 있는 선형 구조, 
정해진 대로 접근 할 수 있는 비선형 구조로 나뉨.
선형 구조의 예로는 스택, 큐, 연결리스트
비선형 구조의 예로는 트리, 그래프
등이 있음.

1.4 추상 데이터형
ADT로 표기됨. 원시 추상 데이터형, 사용자 정의 추상 데이터형이 있는데, 기본 변수들은 그들끼리 +, -, /, * 등의 수식연산을 할 수 있듯이 추상 데이터형은 변수 저장공간과 연산을 같이 선언하는데 의미가 있음.
추상 데이터형의 예로는 연결리스트, 스택, 큐, 트리, 그래프, 서로소집합, 등이 있음.

1.5 알고리즘이란 무엇인가?
문제를 해결하기 위해선 그것을 해결할 수식이 필요함.
수식을 만들기 위한 단계별 지시사항을 알고리즘이라고 함.

1.6 왜 알고리즘을 분석하는가?
알고리즘은 그 속도와 정확성 등에 따라 안 좋은 알고리즘, 최선의 알고리즘, 평균의 알고리즘으로 분류된다.
알고리즘을 분석하는 이유는 니즈에 맞고 효율적인 알고리즘을 쓰기 위함이다.

1.7 알고리즘 정렬의 목적
알고리즘끼리 비교하기 위해 정렬함.
주로 수행시간으로 비교하지만 간혹 메모리, 개발자들의 인건비로 비교할 때도 있음.

1.8 수행 시간 분석이란 무엇인가?
알고리즘의 수행 시간이 빠른지 느린지 평균인지를 분석한다.
입력의 크기에 따라 변하는 처리속도의 일정한 증가량으로 수행 시간을 분석한다. 

1.9 어떻게 알고리즘을 비교하는가?
객관적 지표에 따라 여러가지 방법이 있다. 이상적인 해법만 말하자면, 입력값의 수행속도를 f(n)으로 설정하여 수행시간마다 이 수행속도를 비교하는 것이다.  

1.10 증가율이란 무엇인가?
n^4, n^2, 2n, 1 등 입력값의 일정한 증가량을 말한다. 

1.11 많이 사용되는 증가율
n^4, n^2, 2n, 1 등 있다. 정말 여러가지가 있는데 기억이 안남.

1.12 분석의 종류
느린 알고리즘인지, 빠른 알고리즘인지, 평균의 알고리즘인지 분석하는 3가지 방법이 있음.
수식으로 확인하자면
f(n) = n^2+100n+1
f(n) = n^4+2n
요런식으로 두 개의 수식이 있다면
f(n) = n^2+100n+1 (상대적으로 최선인 애)
f(n) = n^4+2n (나쁜애)
요렇게 판단되는 것임.

1.13 점근적 표기법
처리해야할 양에 가장 근접한 증가율이 무엇이냐. 를 알기 위해서
느린 알고리즘, 빠른 알고리즘, 평균의 알고리즘 수식f(n) 각각의 상한과 하한을 찾는다. 
밑에 부터는 표기법

1.14 빅-오 표기법 
빅-오 표기법을 사용하면 이 수식의 엄밀한 상한을 찾을 수 있다.
f(n) = O(g(n)) 으로 표기할 수 있다. 해석하자면 입력값 n에 대해 가장 상한인 값은 g(n)이라는 말임.
수식으로 확인하자면
f(n) = n^2+100n+1 이라는 수식을 빅-오 표기법으로 엄밀한 상한을 찾는 방법은
f(n) = O(g(n)), g(n) = n^2임. 
입력값 n의 최대 증가량이 빅-오 표기법의 정의에 의하면 최대로 오래걸리는 속도가 되기 때문.
